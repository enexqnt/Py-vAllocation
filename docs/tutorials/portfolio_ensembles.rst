Portfolio Ensembling
====================

The :mod:`pyvallocation.ensembles` helpers make it easy to blend the exposures of
portfolios generated by different risk models. This tutorial reuses the
``examples/ETF_prices.csv`` dataset and combines a mean-variance frontier with a
Mean-CVaR frontier.

.. code-block:: python

    import pandas as pd
    from pathlib import Path

    from pyvallocation.ensembles import average_frontiers, exposure_stack_frontiers
    from pyvallocation.portfolioapi import AssetsDistribution, PortfolioWrapper

    data_path = Path("examples/ETF_prices.csv")
    prices = pd.read_csv(data_path, index_col="Date", parse_dates=True).ffill().dropna()
    returns = prices.pct_change().dropna()

    distribution = AssetsDistribution(scenarios=returns)
    wrapper = PortfolioWrapper(distribution)
    wrapper.set_constraints({"long_only": True, "total_weight": 1.0})

    mv_frontier = wrapper.mean_variance_frontier(num_portfolios=6)
    cvar_frontier = wrapper.mean_cvar_frontier(num_portfolios=6, alpha=0.05)

    average_mix = average_frontiers([mv_frontier, cvar_frontier])
    stacked_mix = exposure_stack_frontiers([mv_frontier, cvar_frontier], L=2)

    print("Average exposures:\n", average_mix.round(4))
    print("Stacked exposures:\n", stacked_mix.round(4))

The call to :func:`~pyvallocation.ensembles.average_frontiers` computes a simple
exposure average, optionally with custom ensemble weights. The
:func:`~pyvallocation.ensembles.exposure_stack_frontiers` helper searches for a
convex combination of portfolios that reduces extremes and improves diversification.

Within a single frontier you can also average or stack specific portfolio
columns. The :class:`~pyvallocation.portfolioapi.PortfolioFrontier` convenience
method :meth:`~pyvallocation.portfolioapi.PortfolioFrontier.ensemble_average`
wraps :func:`~pyvallocation.ensembles.average_exposures` with awareness of the
asset names.

Interpreting the results
------------------------

- *Average exposures* provide the simplest blend across models; they are mean
  weights that still satisfy the base constraints.
- *Exposure stacking* solves a small quadratic programme to dampen outliers and
  typically produces sparser allocations.
- The self-ensemble (`frontier.ensemble_average`) is useful for smoothing
  noisy frontiers or mixing end-points (e.g., minimum variance + maximum
  expected-return portfolios).

.. seealso::
   The :mod:`pyvallocation.ensembles` module documents additional utilities
   such as :func:`pyvallocation.ensembles.exposure_stacking` for directly
   manipulating weight matrices.

For a runnable demonstration, execute ``python examples/portfolio_ensembles.py``.
