"""Combine frontiers generated by different risk models into ensemble allocations."""

from __future__ import annotations

from pathlib import Path

import pandas as pd

from pyvallocation.ensembles import average_frontiers, exposure_stack_frontiers
from pyvallocation.portfolioapi import AssetsDistribution, PortfolioWrapper

DATA_PATH = Path(__file__).with_name("ETF_prices.csv")


def load_returns() -> pd.DataFrame:
    prices = pd.read_csv(DATA_PATH, index_col="Date", parse_dates=True)
    prices = prices.ffill().dropna()
    return prices.pct_change().dropna()


def main() -> None:
    returns = load_returns().iloc[-1000:]  # focus on a rolling window

    distribution = AssetsDistribution(scenarios=returns)
    wrapper = PortfolioWrapper(distribution)
    wrapper.set_constraints({"long_only": True, "total_weight": 1.0})

    mv_frontier = wrapper.mean_variance_frontier(num_portfolios=6)
    cvar_frontier = wrapper.mean_cvar_frontier(num_portfolios=6, alpha=0.05)

    avg_series = average_frontiers([mv_frontier, cvar_frontier])
    stacked_series = exposure_stack_frontiers([mv_frontier, cvar_frontier], L=2)

    # within-frontier averaging example
    ensemble_weights, _, _ = mv_frontier.get_min_risk_portfolio()
    combined_frontier_average = mv_frontier.ensemble_average(columns=[0, -1])

    print("=== Ensemble average across risk models ===")
    print(avg_series.round(4))
    print("\n=== Exposure stacking (L=2) ===")
    print(stacked_series.round(4))
    print("\n=== Frontier self-ensemble (mean-variance endpoints) ===")
    print(combined_frontier_average.round(4))
    print("\nMinimum-variance weights for reference:")
    print(ensemble_weights.round(4))


if __name__ == "__main__":
    main()
